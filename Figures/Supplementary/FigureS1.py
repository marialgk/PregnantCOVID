# -*- coding: utf-8 -*-
# Automatically generated by Colab.


#%% Import stuff

# Base python
import os
from datetime import datetime

# Dataframes and matrices
import numpy as np
import pandas as pd

# Statistics
from scipy.stats import chi2_contingency

# Figures and plotting
import seaborn as sns
import matplotlib.pyplot as plt

#%% Set directory and load data

os.chdir(PATH)

df =  pd.read_csv('not_imputed_dataset.tsv',
                  sep='\t',
                  header=0,
                  index_col='index')

# Qualitative variables
quali_vars = ['group',
              'mom_education',
              'works',
              'race_marginalized_group']
d_quali = df[quali_vars].drop(columns='group')

# Quantitative variables
d_quant = df.drop(columns=quali_vars)

#%% Function for drawing the heatmap

def heat_map(matrix,
             figname,
             cmap='coolwarm',
             dim=(15, 15)):
    """
    Draw a heatmap with 
    """
    # Generate a mask for the upper triangle
    mask = np.triu(np.ones_like(matrix, dtype=bool))
    # 15 by 15 figure
    fig, ax = plt.subplots(figsize=dim)
    # Draw heatmap
    sns.heatmap(matrix,
                mask=mask,
                annot=True,
                center=0,
                cmap=cmap,
                square=True,
                linewidths=0.5,
                ax=ax)
    date = datetime.now().strftime('%Y%m%d_%H%M%S')
    fig.savefig(f'{figname}_heatmap_{date}.png')

#%% Correlation matrix

# Compute the correlation matrix
corr = d_quant.corr()

# Draw the heatmap
heat_map(corr, 'quanti_pearson_corr', dim=(10, 10))

#%% Chi-squared matrix

def chi_matrix(df):
    """
    Gets a squared matrix in which the variables names are columns and rows,
    and values are the p-values in the chi-squared test between the two 
    variables.
    """
    # Create the square matrix
    variables = df.columns
    chi_p = pd.DataFrame(columns=variables, index=variables)
    
    
    for num, var in enumerate(variables):
        for other_var in variables[num:]:
            # Create contingency table for the variable pair.
            cross_tab = pd.crosstab(df[var], df[other_var])
            # Run the chi0squared analysis
            _, p, _, _ = chi2_contingency(cross_tab)
            # register p-value on the dataframe
            chi_p.loc[var, other_var] = p
            chi_p.loc[other_var, var] = p
    return chi_p

# Get p-values
mat = chi_matrix(d_quali)

heat_map(mat.astype(float), 'quali_chiP', cmap='YlOrBr_r', dim=(5,5))
